-- Challenge - Joining on multiple tables
-- Write SQL queries to perform the following tasks using the Sakila database:

-- 1.List the number of films per category.
    SELECT COUNT(f.film_id) AS Number_of_films,c.name as Category_name
    FROM sakila.film f
    JOIN
    sakila.film_category fc
    ON f.film_id=fc.film_id
    JOIN
    sakila.category c
    ON fc.category_id=c.category_id
    GROUP BY fc.category_id
    ORDER BY Number_of_films DESC;
-- 2.Retrieve the store ID, city, and country for each store.
     SELECT s.store_id AS store_id,ci.city AS city,co.country AS country
     FROM sakila.store s
     JOIN sakila.address a
     ON s.address_id=a.address_id
     JOIN sakila.city ci
     ON a.city_id=ci.city_id
     JOIN sakila.country co
     ON ci.country_id=co.country_id;
     
-- 3.Calculate the total revenue generated by each store in dollars.
     SELECT SUM(p.amount) as total_revenue,s.store_id
     FROM sakila.payment p
     JOIN sakila.staff st
     ON p.staff_id=st.staff_id
     JOIN sakila.store s
     ON  st.store_id=s.store_id
     GROUP BY s.store_id;

-- 4.Determine the average running time of films for each category.

     SELECT ROUND(AVG(f.length),2) as average_running_time, c.name category_name
     FROM sakila.film f
     JOIN sakila.film_category fc
     ON f.film_id= fc.film_id
     JOIN sakila.category c
     ON fc.category_id=c.category_id
     GROUP BY fc.category_id;
     
     -- Bonus:

-- 5.Identify the film categories with the longest average running time.
    SELECT ROUND(AVG(f.length),2) as average_running_time, c.name category_name
     FROM sakila.film f
     JOIN sakila.film_category fc
     ON f.film_id= fc.film_id
     JOIN sakila.category c
     ON fc.category_id=c.category_id
     GROUP BY fc.category_id
     ORDER BY average_running_time DESC;
     
-- 6.Display the top 10 most frequently rented movies in descending order.
	 SELECT f.title,COUNT(r.rental_id) as rental_count
     FROM sakila.film f
     JOIN sakila.inventory i
     ON f.film_id= i.film_id
     JOIN sakila.rental r
     ON i.inventory_id=r.inventory_id
     GROUP BY f.title
     ORDER BY rental_count desc
     limit 10;
     
     
-- 7.Determine if "Academy Dinosaur" can be rented from Store 1.

 SELECT f.title,i.store_id,count(i.inventory_id) as available_copies
 from sakila.film f
 JOIN sakila.inventory i
 ON f.film_id=i.film_id 
 JOIN sakila.store s
 ON i.store_id=s.store_id 
 left join sakila.rental r
 on i.inventory_id=r.inventory_id
 and r.return_date is null
 where f.title='Academy Dinosaur' and i.store_id=1
 and r.rental_id is null
 group by f.title,i.store_id;
 
     -- Hence 'Academy Dinosaur is available to rent.'
	
-- 8.Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.'
 -- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
use sakila;         
SELECT 
    f.title AS film_title,
    CASE 
        WHEN COUNT(i.inventory_id) = 0 THEN 'NOT available' 
        ELSE 'Available' 
    END AS availability_status
FROM 
    sakila.film f
LEFT JOIN 
    inventory i ON f.film_id = i.film_id 
GROUP BY 
    f.film_id, f.title 
LIMIT 0, 1000;

   